##Para mejor entendimiento del problema, es aconsejable leer el README.txt
#Variables a modificar:
# Tamaño de la Red
SIZE 10
#Cantidad de publisher para partir (menor o igual a size)
P 0
#Cantidad de subscriber para partir (menor o igual a size)
S 0
#Test: para probar una funcionalidad especifica (1: publish, 2: register_publisher, 3: deregister_publisher, 4: register_subscriber, 5: deregister_subscriber, 6: delete_publication, 0: random)
T 0
#probabilities mayor a 6: el número de acciones va de 0 a 6. Por lo que si se elige un número cercano a 6, cada vez que un mensaje pase por el nodo, él además creara una nueva acción. Es recomendable el número 20 para no saturar la red.
Pr 10

################# Variables de la red ################


# Cantidad de ciclos que se deseen para la ejecución de la simulación
CYCLES 10000
#CYCLE SIZE*100
CYCLE 1000

# Delay existente en la transferencia del mensaje,
# el cual es un porcentaje relativo al tamaÃ±o
# del ciclo
MINDELAY 0
MAXDELAY 50

# Probabilidad de caída en el mensaje enviado
# DROP varía entre 0 y 1
DROP 0

################ Parámetros de la red #############

# Semilla del valor Random
# Recordar que mientras no cambie la semilla, se generará el mismo random
random.seed 1234526789

# Tamaño de la red
network.size SIZE

# Tipo de nodo a utilizar en la red
network.node cl.usach.sd.ExampleNode

# Frecuencia en que se realiza cada etapa, revisa la frecuencia de cada red.
#OBSERVER_STEP 2000
OBSERVER_STEP 10000
TRAFFIC_STEP 1000

# Tiempo de término en la simulación
simulation.endtime CYCLE*CYCLES
simulation.logtime CYCLE

###########################################################
# Todos los componentes tienen la estructura de la        #
# siguiente forma:                                        #
# <protocol|init|control>.string_id [full_path_]classname #
# <protocol|init|control>.string_id.parameter_name        #
###########################################################

################### Protocolos #####################

# IdleProtocol: Es un paquete principal de Peersim, 
# el cuál incluye que cada nodo sea responsable por
# establecer la comunicación con sus vecinos
protocol.0link peersim.core.IdleProtocol

protocol.1urt UniformRandomTransport #Genera cuando se demora en enviar el mensaje
protocol.1urt.mindelay (CYCLE*MINDELAY)/100
protocol.1urt.maxdelay (CYCLE*MAXDELAY)/100

protocol.2tr UnreliableTransport #verifica por si se cae el mensaje.
protocol.2tr.transport 1urt
protocol.2tr.drop DROP

protocol.3layer cl.usach.sd.Layer
protocol.3layer.linkable 0link
protocol.3layer.step CYCLE #Unidad de tiempo que tiene esta simulación
protocol.3layer.transport 2tr


################### Inicialización ###################

# WireKOut: Toma un protocolo Linkable y añade K
# conexiones de manera random. La variable undir
# es para indicar que es direccionada la conexión
init.0rndlink WireKOut
init.0rndlink.k 2
init.0rndlink.undir false
init.0rndlink.protocol 0link

init.1statebuilder cl.usach.sd.Initialization
init.1statebuilder.protocol 3layer
init.1statebuilder.transport 2tr
init.1statebuilder.publishers P
init.1statebuilder.subscribers S

################### Control ######################

control.0traffic cl.usach.sd.TrafficGenerator
control.0traffic.protocol 3layer
control.0traffic.step TRAFFIC_STEP
control.0traffic.probabilities Pr
control.0traffic.test T

control.1observer cl.usach.sd.Observer
control.1observer.protocol 3layer
control.1observer.step OBSERVER_STEP